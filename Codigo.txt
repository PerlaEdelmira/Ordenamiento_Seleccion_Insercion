import java.util.Arrays;
import java.util.Random;
import java.util.Scanner;
class MetodosDeOrdenamiento{
	
	public void ordenamientoPorSeleccion(int[] numeros) {
		int recorridos=0, intercambios=0, comparaciones=0;
		long tInicio, tFin;
		tInicio = System.nanoTime();
		for(int i=0;i<numeros.length;i++) {
			int minimo=i;
			for(int j=i+1;j<numeros.length;j++) {
				if(numeros[j]<numeros[minimo]) {
					minimo = j;
					intercambios++;
				}
				int aux = numeros[i];
				numeros[i]= numeros[minimo];
				numeros[minimo]=aux;
				comparaciones++;
			}
			recorridos++;
		}
		tFin = System.nanoTime();
		System.out.println("-------> Tiempo de Procesamiento: " + (tFin - tInicio));
		System.out.println("-------> Recorridos: " + recorridos);
		System.out.println("-------> Intercambios: " + intercambios);
		System.out.println("-------> Comparaciones: " + comparaciones);
	}
	public void ordenamientoPorInsercionDirecta(int[]numeros) {
		int aux, j;
		for(int i = 1;i<numeros.length; i++) { //desde el segundo elemento hasta
			aux =numeros[i];					// el final, gusrdamos el elemento y
			j = i-1;							//empezamos a comprobar con el aterior
			while((j>=0) && (aux < numeros[j])) {	//mientras queden posiciones y el
				numeros[j+1] = numeros[j];			//valor de aux sea menor que los
				j--;							
			}
			numeros[j+1] = aux;
		}
	}
	public void mostrarVector(int numeros[]) {
		System.out.println(Arrays.toString(numeros));
	}
	
}
public class Seleccion_Insercion {
	public static void main(String[]args){

	MetodosDeOrdenamiento mo = new MetodosDeOrdenamiento();
		Scanner entrada = new Scanner(System.in);
		int vec[];
		String op = "";
		byte num =0;
		do {
			System.out.println("Ingrese la Opcion: " + "\n1)1,000" + "\n2)10,000" + "\n3)100,000" + "\n4)1,000,000");
			num = entrada.nextByte();
			System.out.println("Ingrese una opcion: " + "\n1) Ordenamiento Por Seleccion" + "\n2)Ordenamiento Por Insercion");
			op = entrada.next();
			
		switch (op) {
		case "1": System.out.println("\n============= ORDENAMIENTO SELECCION ============");
						if(num == 1) {
							vec = new int [1000];
							for(int i=0; i<vec.length; i++) {
								vec[i]= new Random().nextInt(100);
							}
							mo.mostrarVector(vec);
							System.out.println("Datos de eficiencia del algoritmo: ");
							mo.ordenamientoPorSeleccion(vec);
						}else if(num == 2) {
							vec = new int [10000];
							for(int i=0; i<vec.length; i++) {
								vec[i]= new Random().nextInt(100);
							}
							mo.mostrarVector(vec);
							System.out.println("Datos de eficiencia del algoritmo: ");
							mo.ordenamientoPorSeleccion(vec);
						}else if(num == 3) {
							vec = new int [100000];
							for(int i=0; i<vec.length; i++) {
								vec[i]= new Random().nextInt(100);
							}
							mo.mostrarVector(vec);
							System.out.println("Datos de eficiencia del algoritmo: ");
							mo.ordenamientoPorSeleccion(vec);
						}else if(num == 4) {
							vec = new int [1000000];
							for(int i=0; i<vec.length; i++) {
								vec[i]= new Random().nextInt(100);
							}
							mo.mostrarVector(vec);
							System.out.println("Datos de eficiencia del algoritmo: ");
							mo.ordenamientoPorSeleccion(vec);
						}
						break;
	case "2":System.out.println("\n======== ORDENAMIENTO INSERCION DIRECTA ========");
			if(num == 1) {
				vec = new int [1000];
				for(int i=0; i<vec.length; i++) {
					vec[i]= new Random().nextInt(100);
				}
				mo.mostrarVector(vec);
				System.out.println("Datos de eficiencia del algoritmo: ");
				mo.ordenamientoPorInsercionDirecta(vec);
			}else if(num == 2) {
				vec = new int [10000];
				for(int i=0; i<vec.length; i++) {
					vec[i]= new Random().nextInt(100);
				}
				mo.mostrarVector(vec);
				System.out.println("Datos de eficiencia del algoritmo: ");
				mo.ordenamientoPorInsercionDirecta(vec);
			}else if(num == 3) {
				vec = new int [100000];
				for(int i=0; i<vec.length; i++) {
					vec[i]= new Random().nextInt(100);
				}
				mo.mostrarVector(vec);
				System.out.println("Datos de eficiencia del algoritmo: ");
				mo.ordenamientoPorInsercionDirecta(vec);
			}else if(num == 4) {
				vec = new int [1000000];
				for(int i=0; i<vec.length; i++) {
					vec[i]= new Random().nextInt(100);
				}
				mo.mostrarVector(vec);
				System.out.println("Datos de eficiencia del algoritmo: ");
				mo.ordenamientoPorInsercionDirecta(vec);;
			}
			break;	
		}
	}while(op!="5");
	}
}